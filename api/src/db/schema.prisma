generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id                 String         @id @default(uuid())
  username           String         @unique
  email              String         @unique
  password           String
  role               Role
  department         Department?    @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  departmentId       String?
  first_name         String
  last_name          String
  admissionYear      String?
  currentSemester    String?
  status             StudentStatus? @default(Active)
  avatar             String?
  refreshToken       String?
  studentEnrollments Enrollment[]   @relation(name: "StudentEnrollments") // Student enrollments
  teacherEnrollments Enrollment[]   @relation(name: "TeacherEnrollments") // Teacher enrollments
  grades             Grade[]
  attendances        Attendance[]
  batchesCoordinated Batch[]        @relation(name: "BatchCoordinator") // Teacher coordinating batches
  batch              Batch?         @relation(name: "BatchStudents", fields: [batchId], references: [id], onDelete: Cascade)
  batchId            String?
  created_at         DateTime       @default(now())
  updated_at         DateTime       @updatedAt
}

// Course model
model Course {
  id                String       @id @default(uuid())
  department        Department   @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  departmentId      String
  code              String       @unique
  name              String       @unique
  description       String
  credits           Int
  lecture_classes   Int
  tutorial_classes  Int
  practical_classes Int
  semesterNumber    Int
  enrollments       Enrollment[]
  created_at        DateTime     @default(now())
  updated_at        DateTime     @updatedAt
}

// Enrollment model
model Enrollment {
  id                   String           @id @default(uuid())
  student              User             @relation(name: "StudentEnrollments", fields: [studentId], references: [id], onDelete: Cascade)
  studentId            String
  teacher              User             @relation(name: "TeacherEnrollments", fields: [teacherId], references: [id], onDelete: Cascade)
  teacherId            String
  course               Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId             String
  enrollmentDate       DateTime         @default(now())
  semester             Semester         @relation(fields: [semesterId], references: [id], onDelete: Cascade)
  semesterId           String
  totalClasses         Int
  attendedClasses      Int
  absentClasses        Int
  attendancePercentage Float
  status               EnrollmentStatus @default(Enrolled)
  grades               Grade[]
  attendances          Attendance[]
  created_at           DateTime         @default(now())
  updated_at           DateTime         @updatedAt
}

// Grade model
model Grade {
  id           String     @id @default(uuid())
  enrollment   Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  enrollmentId String
  grade        String
  gradedBy     User       @relation(fields: [gradedById], references: [id], onDelete: Cascade)
  gradedById   String
  created_at   DateTime   @default(now())
  updated_at   DateTime   @updatedAt
}

// Attendance model
model Attendance {
  id           String           @id @default(uuid())
  enrollment   Enrollment       @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  enrollmentId String
  date         DateTime         @default(now())
  status       AttendanceStatus
  markedBy     User             @relation(fields: [markedById], references: [id], onDelete: Cascade)
  markedById   String
  created_at   DateTime         @default(now())
  updated_at   DateTime         @updatedAt
}

// Notice model
model Notice {
  id          String   @id @default(uuid())
  title       String   @unique
  description String
  date        DateTime
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

// Department model
model Department {
  id          String   @id @default(uuid())
  school      School   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolId    String
  name        String
  code        String   @unique
  description String
  users       User[]
  batches     Batch[]
  courses     Course[]
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

// School model
model School {
  id          String       @id @default(uuid())
  name        String
  code        String       @unique
  description String
  departments Department[]
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
}

// Semester model
model Semester {
  id                String         @id @default(uuid())
  academicYear      Int
  type              SemesterType
  number            Int            @unique
  startDate         DateTime
  endDate           DateTime
  registrationStart DateTime
  registrationEnd   DateTime
  status            AcademicStatus
  enrollments       Enrollment[]
  batches           Batch[]
  created_at        DateTime       @default(now())
  updated_at        DateTime       @updatedAt
}

// Batch model
model Batch {
  id            String     @id @default(uuid())
  department    Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  departmentId  String
  semester      Semester   @relation(fields: [semesterId], references: [id], onDelete: Cascade)
  semesterId    String
  name          String     @unique
  schedule_info Json?
  capacity      Int        @default(50)
  coordinator   User       @relation(name: "BatchCoordinator", fields: [coordinatorId], references: [id], onDelete: Cascade)
  coordinatorId String
  students      User[]     @relation(name: "BatchStudents")
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
}

// Enums
enum Role {
  Student
  Admin
  SuperAdmin
}

enum EnrollmentStatus {
  Enrolled
  Completed
  Dropped
}

enum StudentStatus {
  Active
  Inactive
  Graduated
  Suspended
}

enum AcademicStatus {
  Active
  Completed
  Upcoming
}

enum AttendanceStatus {
  Present
  Absent
}

enum SemesterType {
  Odd
  Even
}
